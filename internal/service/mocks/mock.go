// Code generated by MockGen. DO NOT EDIT.
// Source: service.go

// Package mock_service is a generated GoMock package.
package mock_service

import (
	presenter "filmLibraryVk/api/REST/presenter"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockActor is a mock of Actor interface.
type MockActor struct {
	ctrl     *gomock.Controller
	recorder *MockActorMockRecorder
}

// MockActorMockRecorder is the mock recorder for MockActor.
type MockActorMockRecorder struct {
	mock *MockActor
}

// NewMockActor creates a new mock instance.
func NewMockActor(ctrl *gomock.Controller) *MockActor {
	mock := &MockActor{ctrl: ctrl}
	mock.recorder = &MockActorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockActor) EXPECT() *MockActorMockRecorder {
	return m.recorder
}

// CreateActor mocks base method.
func (m *MockActor) CreateActor(request presenter.ActorRequest) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateActor", request)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateActor indicates an expected call of CreateActor.
func (mr *MockActorMockRecorder) CreateActor(request interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateActor", reflect.TypeOf((*MockActor)(nil).CreateActor), request)
}

// DeleteActor mocks base method.
func (m *MockActor) DeleteActor(id int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteActor", id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteActor indicates an expected call of DeleteActor.
func (mr *MockActorMockRecorder) DeleteActor(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteActor", reflect.TypeOf((*MockActor)(nil).DeleteActor), id)
}

// GetActor mocks base method.
func (m *MockActor) GetActor(id int) (presenter.ActorResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetActor", id)
	ret0, _ := ret[0].(presenter.ActorResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetActor indicates an expected call of GetActor.
func (mr *MockActorMockRecorder) GetActor(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetActor", reflect.TypeOf((*MockActor)(nil).GetActor), id)
}

// GetActors mocks base method.
func (m *MockActor) GetActors() ([]presenter.ActorResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetActors")
	ret0, _ := ret[0].([]presenter.ActorResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetActors indicates an expected call of GetActors.
func (mr *MockActorMockRecorder) GetActors() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetActors", reflect.TypeOf((*MockActor)(nil).GetActors))
}

// PatchActor mocks base method.
func (m *MockActor) PatchActor(id int, request presenter.ActorRequest) (presenter.ActorResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PatchActor", id, request)
	ret0, _ := ret[0].(presenter.ActorResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PatchActor indicates an expected call of PatchActor.
func (mr *MockActorMockRecorder) PatchActor(id, request interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PatchActor", reflect.TypeOf((*MockActor)(nil).PatchActor), id, request)
}

// PutActor mocks base method.
func (m *MockActor) PutActor(id int, request presenter.ActorRequest) (presenter.ActorResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PutActor", id, request)
	ret0, _ := ret[0].(presenter.ActorResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PutActor indicates an expected call of PutActor.
func (mr *MockActorMockRecorder) PutActor(id, request interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutActor", reflect.TypeOf((*MockActor)(nil).PutActor), id, request)
}

// MockFilm is a mock of Film interface.
type MockFilm struct {
	ctrl     *gomock.Controller
	recorder *MockFilmMockRecorder
}

// MockFilmMockRecorder is the mock recorder for MockFilm.
type MockFilmMockRecorder struct {
	mock *MockFilm
}

// NewMockFilm creates a new mock instance.
func NewMockFilm(ctrl *gomock.Controller) *MockFilm {
	mock := &MockFilm{ctrl: ctrl}
	mock.recorder = &MockFilmMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockFilm) EXPECT() *MockFilmMockRecorder {
	return m.recorder
}

// CreateFilm mocks base method.
func (m *MockFilm) CreateFilm(request presenter.FilmRequest) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateFilm", request)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateFilm indicates an expected call of CreateFilm.
func (mr *MockFilmMockRecorder) CreateFilm(request interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateFilm", reflect.TypeOf((*MockFilm)(nil).CreateFilm), request)
}

// DeleteFilm mocks base method.
func (m *MockFilm) DeleteFilm(id int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteFilm", id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteFilm indicates an expected call of DeleteFilm.
func (mr *MockFilmMockRecorder) DeleteFilm(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteFilm", reflect.TypeOf((*MockFilm)(nil).DeleteFilm), id)
}

// GetFilm mocks base method.
func (m *MockFilm) GetFilm(id int) (presenter.FilmResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFilm", id)
	ret0, _ := ret[0].(presenter.FilmResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetFilm indicates an expected call of GetFilm.
func (mr *MockFilmMockRecorder) GetFilm(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFilm", reflect.TypeOf((*MockFilm)(nil).GetFilm), id)
}

// GetFilms mocks base method.
func (m *MockFilm) GetFilms(sortBy string) ([]presenter.FilmResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFilms", sortBy)
	ret0, _ := ret[0].([]presenter.FilmResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetFilms indicates an expected call of GetFilms.
func (mr *MockFilmMockRecorder) GetFilms(sortBy interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFilms", reflect.TypeOf((*MockFilm)(nil).GetFilms), sortBy)
}

// PatchFilm mocks base method.
func (m *MockFilm) PatchFilm(id int, request presenter.FilmRequest) (presenter.FilmResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PatchFilm", id, request)
	ret0, _ := ret[0].(presenter.FilmResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PatchFilm indicates an expected call of PatchFilm.
func (mr *MockFilmMockRecorder) PatchFilm(id, request interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PatchFilm", reflect.TypeOf((*MockFilm)(nil).PatchFilm), id, request)
}

// PutFilm mocks base method.
func (m *MockFilm) PutFilm(id int, request presenter.FilmRequest) (presenter.FilmResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PutFilm", id, request)
	ret0, _ := ret[0].(presenter.FilmResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PutFilm indicates an expected call of PutFilm.
func (mr *MockFilmMockRecorder) PutFilm(id, request interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutFilm", reflect.TypeOf((*MockFilm)(nil).PutFilm), id, request)
}

// SearchFilmsBy mocks base method.
func (m *MockFilm) SearchFilmsBy(field, value string) ([]presenter.FilmResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SearchFilmsBy", field, value)
	ret0, _ := ret[0].([]presenter.FilmResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SearchFilmsBy indicates an expected call of SearchFilmsBy.
func (mr *MockFilmMockRecorder) SearchFilmsBy(field, value interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SearchFilmsBy", reflect.TypeOf((*MockFilm)(nil).SearchFilmsBy), field, value)
}

// MockUser is a mock of User interface.
type MockUser struct {
	ctrl     *gomock.Controller
	recorder *MockUserMockRecorder
}

// MockUserMockRecorder is the mock recorder for MockUser.
type MockUserMockRecorder struct {
	mock *MockUser
}

// NewMockUser creates a new mock instance.
func NewMockUser(ctrl *gomock.Controller) *MockUser {
	mock := &MockUser{ctrl: ctrl}
	mock.recorder = &MockUserMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUser) EXPECT() *MockUserMockRecorder {
	return m.recorder
}

// DeleteUser mocks base method.
func (m *MockUser) DeleteUser(id int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteUser", id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteUser indicates an expected call of DeleteUser.
func (mr *MockUserMockRecorder) DeleteUser(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteUser", reflect.TypeOf((*MockUser)(nil).DeleteUser), id)
}

// GetUserById mocks base method.
func (m *MockUser) GetUserById(id int) (presenter.UserResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserById", id)
	ret0, _ := ret[0].(presenter.UserResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserById indicates an expected call of GetUserById.
func (mr *MockUserMockRecorder) GetUserById(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserById", reflect.TypeOf((*MockUser)(nil).GetUserById), id)
}

// GetUsers mocks base method.
func (m *MockUser) GetUsers() ([]presenter.UserResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUsers")
	ret0, _ := ret[0].([]presenter.UserResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUsers indicates an expected call of GetUsers.
func (mr *MockUserMockRecorder) GetUsers() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUsers", reflect.TypeOf((*MockUser)(nil).GetUsers))
}

// Login mocks base method.
func (m *MockUser) Login(login presenter.Login) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Login", login)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Login indicates an expected call of Login.
func (mr *MockUserMockRecorder) Login(login interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Login", reflect.TypeOf((*MockUser)(nil).Login), login)
}

// PatchUser mocks base method.
func (m *MockUser) PatchUser(id int, request presenter.UserRequest) (presenter.UserResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PatchUser", id, request)
	ret0, _ := ret[0].(presenter.UserResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PatchUser indicates an expected call of PatchUser.
func (mr *MockUserMockRecorder) PatchUser(id, request interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PatchUser", reflect.TypeOf((*MockUser)(nil).PatchUser), id, request)
}

// PutUser mocks base method.
func (m *MockUser) PutUser(id int, request presenter.UserRequest) (presenter.UserResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PutUser", id, request)
	ret0, _ := ret[0].(presenter.UserResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PutUser indicates an expected call of PutUser.
func (mr *MockUserMockRecorder) PutUser(id, request interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutUser", reflect.TypeOf((*MockUser)(nil).PutUser), id, request)
}

// Register mocks base method.
func (m *MockUser) Register(register presenter.Register) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Register", register)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Register indicates an expected call of Register.
func (mr *MockUserMockRecorder) Register(register interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Register", reflect.TypeOf((*MockUser)(nil).Register), register)
}
